ARM GAS  /tmp/ccTmBf1a.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	2
  20              		.global	NMI_Handler
  21              		.thumb
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccTmBf1a.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  60:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  61:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  62:Src/stm32f1xx_it.c **** 
  63:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /******************************************************************************/
  66:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  67:Src/stm32f1xx_it.c **** /******************************************************************************/
  68:Src/stm32f1xx_it.c **** /**
  69:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Src/stm32f1xx_it.c ****   */
  71:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  72:Src/stm32f1xx_it.c **** {
  27              		.loc 1 72 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE65:
  36 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	2
  38              		.global	HardFault_Handler
  39              		.thumb
  40              		.thumb_func
  42              	HardFault_Handler:
  43              	.LFB66:
  73:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccTmBf1a.s 			page 3


  75:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Src/stm32f1xx_it.c **** 
  78:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  79:Src/stm32f1xx_it.c **** }
  80:Src/stm32f1xx_it.c **** 
  81:Src/stm32f1xx_it.c **** /**
  82:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  83:Src/stm32f1xx_it.c ****   */
  84:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  85:Src/stm32f1xx_it.c **** {
  44              		.loc 1 85 0
  45              		.cfi_startproc
  46              		@ Volatile: function does not return.
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.L3:
  86:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  89:Src/stm32f1xx_it.c ****   while (1)
  90:Src/stm32f1xx_it.c ****   {
  91:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  92:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  93:Src/stm32f1xx_it.c ****   }
  51              		.loc 1 93 0 discriminator 1
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE66:
  56 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	2
  58              		.global	MemManage_Handler
  59              		.thumb
  60              		.thumb_func
  62              	MemManage_Handler:
  63              	.LFB67:
  94:Src/stm32f1xx_it.c **** }
  95:Src/stm32f1xx_it.c **** 
  96:Src/stm32f1xx_it.c **** /**
  97:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
  98:Src/stm32f1xx_it.c ****   */
  99:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 100:Src/stm32f1xx_it.c **** {
  64              		.loc 1 100 0
  65              		.cfi_startproc
  66              		@ Volatile: function does not return.
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.L5:
 101:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 102:Src/stm32f1xx_it.c **** 
 103:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 104:Src/stm32f1xx_it.c ****   while (1)
 105:Src/stm32f1xx_it.c ****   {
 106:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
ARM GAS  /tmp/ccTmBf1a.s 			page 4


 107:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 108:Src/stm32f1xx_it.c ****   }
  71              		.loc 1 108 0 discriminator 1
  72 0000 FEE7     		b	.L5
  73              		.cfi_endproc
  74              	.LFE67:
  76 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  77              		.align	2
  78              		.global	BusFault_Handler
  79              		.thumb
  80              		.thumb_func
  82              	BusFault_Handler:
  83              	.LFB68:
 109:Src/stm32f1xx_it.c **** }
 110:Src/stm32f1xx_it.c **** 
 111:Src/stm32f1xx_it.c **** /**
 112:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 113:Src/stm32f1xx_it.c ****   */
 114:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 115:Src/stm32f1xx_it.c **** {
  84              		.loc 1 115 0
  85              		.cfi_startproc
  86              		@ Volatile: function does not return.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.L7:
 116:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 117:Src/stm32f1xx_it.c **** 
 118:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c ****   while (1)
 120:Src/stm32f1xx_it.c ****   {
 121:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 122:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 123:Src/stm32f1xx_it.c ****   }
  91              		.loc 1 123 0 discriminator 1
  92 0000 FEE7     		b	.L7
  93              		.cfi_endproc
  94              	.LFE68:
  96 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  97              		.align	2
  98              		.global	UsageFault_Handler
  99              		.thumb
 100              		.thumb_func
 102              	UsageFault_Handler:
 103              	.LFB69:
 124:Src/stm32f1xx_it.c **** }
 125:Src/stm32f1xx_it.c **** 
 126:Src/stm32f1xx_it.c **** /**
 127:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 128:Src/stm32f1xx_it.c ****   */
 129:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 130:Src/stm32f1xx_it.c **** {
 104              		.loc 1 130 0
 105              		.cfi_startproc
 106              		@ Volatile: function does not return.
 107              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTmBf1a.s 			page 5


 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.L9:
 131:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 132:Src/stm32f1xx_it.c **** 
 133:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 134:Src/stm32f1xx_it.c ****   while (1)
 135:Src/stm32f1xx_it.c ****   {
 136:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 137:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 138:Src/stm32f1xx_it.c ****   }
 111              		.loc 1 138 0 discriminator 1
 112 0000 FEE7     		b	.L9
 113              		.cfi_endproc
 114              	.LFE69:
 116 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 117              		.align	2
 118              		.global	SVC_Handler
 119              		.thumb
 120              		.thumb_func
 122              	SVC_Handler:
 123              	.LFB70:
 139:Src/stm32f1xx_it.c **** }
 140:Src/stm32f1xx_it.c **** 
 141:Src/stm32f1xx_it.c **** /**
 142:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 143:Src/stm32f1xx_it.c ****   */
 144:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 145:Src/stm32f1xx_it.c **** {
 124              		.loc 1 145 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129 0000 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE70:
 133 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 134              		.align	2
 135              		.global	DebugMon_Handler
 136              		.thumb
 137              		.thumb_func
 139              	DebugMon_Handler:
 140              	.LFB71:
 146:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 149:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 150:Src/stm32f1xx_it.c **** 
 151:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 152:Src/stm32f1xx_it.c **** }
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 156:Src/stm32f1xx_it.c ****   */
 157:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 158:Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccTmBf1a.s 			page 6


 141              		.loc 1 158 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 0000 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE71:
 150 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 151              		.align	2
 152              		.global	PendSV_Handler
 153              		.thumb
 154              		.thumb_func
 156              	PendSV_Handler:
 157              	.LFB72:
 159:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 160:Src/stm32f1xx_it.c **** 
 161:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 162:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 163:Src/stm32f1xx_it.c **** 
 164:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 165:Src/stm32f1xx_it.c **** }
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c **** /**
 168:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 169:Src/stm32f1xx_it.c ****   */
 170:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 171:Src/stm32f1xx_it.c **** {
 158              		.loc 1 171 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0000 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE72:
 167 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 168              		.align	2
 169              		.global	SysTick_Handler
 170              		.thumb
 171              		.thumb_func
 173              	SysTick_Handler:
 174              	.LFB73:
 172:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 173:Src/stm32f1xx_it.c **** 
 174:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 175:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 178:Src/stm32f1xx_it.c **** }
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c **** /**
 181:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 182:Src/stm32f1xx_it.c ****   */
 183:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 184:Src/stm32f1xx_it.c **** {
 175              		.loc 1 184 0
ARM GAS  /tmp/ccTmBf1a.s 			page 7


 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		.loc 1 184 0
 180 0000 08B5     		push	{r3, lr}
 181              	.LCFI0:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 3, -8
 184              		.cfi_offset 14, -4
 185:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 186:Src/stm32f1xx_it.c **** 
 187:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 188:Src/stm32f1xx_it.c ****   HAL_IncTick();
 185              		.loc 1 188 0
 186 0002 FFF7FEFF 		bl	HAL_IncTick
 187              	.LVL0:
 188 0006 08BD     		pop	{r3, pc}
 189              		.cfi_endproc
 190              	.LFE73:
 192              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 193              		.align	2
 194              		.global	DMA1_Channel5_IRQHandler
 195              		.thumb
 196              		.thumb_func
 198              	DMA1_Channel5_IRQHandler:
 199              	.LFB74:
 189:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 190:Src/stm32f1xx_it.c **** 
 191:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** }
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c **** /******************************************************************************/
 195:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 196:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 197:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 198:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 199:Src/stm32f1xx_it.c **** /******************************************************************************/
 200:Src/stm32f1xx_it.c **** 
 201:Src/stm32f1xx_it.c **** /**
 202:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel5 global interrupt.
 203:Src/stm32f1xx_it.c ****   */
 204:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 205:Src/stm32f1xx_it.c **** {
 200              		.loc 1 205 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI1:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 206:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 207:Src/stm32f1xx_it.c **** 
 208:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 209:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 209              		.loc 1 209 0
ARM GAS  /tmp/ccTmBf1a.s 			page 8


 210 0002 0248     		ldr	r0, .L17
 211 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 212              	.LVL1:
 213 0008 08BD     		pop	{r3, pc}
 214              	.L18:
 215 000a 00BF     		.align	2
 216              	.L17:
 217 000c 00000000 		.word	hdma_usart1_rx
 218              		.cfi_endproc
 219              	.LFE74:
 221              		.section	.text.USART1_IRQHandler,"ax",%progbits
 222              		.align	2
 223              		.global	USART1_IRQHandler
 224              		.thumb
 225              		.thumb_func
 227              	USART1_IRQHandler:
 228              	.LFB75:
 210:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 211:Src/stm32f1xx_it.c **** 
 212:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 213:Src/stm32f1xx_it.c **** }
 214:Src/stm32f1xx_it.c **** 
 215:Src/stm32f1xx_it.c **** /**
 216:Src/stm32f1xx_it.c ****   * @brief This function handles USART1 global interrupt.
 217:Src/stm32f1xx_it.c ****   */
 218:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 219:Src/stm32f1xx_it.c **** {
 229              		.loc 1 219 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233 0000 08B5     		push	{r3, lr}
 234              	.LCFI2:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 3, -8
 237              		.cfi_offset 14, -4
 220:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 221:Src/stm32f1xx_it.c **** 
 222:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 223:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 238              		.loc 1 223 0
 239 0002 0248     		ldr	r0, .L21
 240 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 241              	.LVL2:
 242 0008 08BD     		pop	{r3, pc}
 243              	.L22:
 244 000a 00BF     		.align	2
 245              	.L21:
 246 000c 00000000 		.word	huart1
 247              		.cfi_endproc
 248              	.LFE75:
 250              		.text
 251              	.Letext0:
 252              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 253              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 254              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 255              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
ARM GAS  /tmp/ccTmBf1a.s 			page 9


 256              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 257              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 258              		.file 8 "Drivers/CMSIS/Include/core_cm3.h"
 259              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccTmBf1a.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccTmBf1a.s:19     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccTmBf1a.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:42     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccTmBf1a.s:57     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:62     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccTmBf1a.s:77     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:82     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccTmBf1a.s:97     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:102    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccTmBf1a.s:117    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:122    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccTmBf1a.s:134    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:139    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccTmBf1a.s:151    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:156    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccTmBf1a.s:168    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccTmBf1a.s:173    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccTmBf1a.s:193    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccTmBf1a.s:198    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccTmBf1a.s:217    .text.DMA1_Channel5_IRQHandler:000000000000000c $d
     /tmp/ccTmBf1a.s:222    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccTmBf1a.s:227    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccTmBf1a.s:246    .text.USART1_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_DMA_IRQHandler
hdma_usart1_rx
HAL_UART_IRQHandler
huart1
